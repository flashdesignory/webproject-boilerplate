var Utils = (function(){
	var _debugId = "utils";
	var _isIE;
	var _ieVersion;
	var _isMobile;
	var _isIOS;
	var _isIphone;
	var _isAndroid;
	var _iosVersion;
	var _androidVersion;
	var _webkitVersion;

	return {
		addListener:function(_obj, _type, _function, _capture){
			if(document.addEventListener){
				_obj.addEventListener(_type, _function, _capture);	
			}else if(document.attachEvent){
				_obj.attachEvent('on' + _type, _function);	
			}else{
				_obj['on' + _type] = _function;	
			}
		},
		removeListener:function(_obj, _type, _function){
			if(document.removeEventListener){
				_obj.removeEventListener(_type, _function);	
			}else if(document.detachEvent){
				_obj.detachEvent('on' + _type, _function);	
			}
		},
		getEventTarget:function(_event){
			if(window.event != null) return window.event.srcElement;
			else return _event.currentTarget;
		},
		preventDefault:function(_event){
			if(window.event != null) window.event.returnValue = false;
			else _event.preventDefault();

		},
		dispatchEvent:function(_obj, _type){
			var e = null;
			if(document.dispatchEvent){
				e = document.createEvent('HTMLEvents');
				e.initEvent(_type, true, true);
				_obj.dispatchEvent(e);
			}else{
				e = document.createEventObject();
				_obj.fireEvent('on' + _type, e);
			}
		},
		dispatchCustomEvent:function(_obj, _type, _data){
			_obj.dispatchEvent(new CustomEvent(_type, {data:_data}));
		},
		addClass:function(element, value){
			if(element){
				if(element.classList){
					var classes = element.classList;
					if(!classes.contains(value)){
						classes.add(value);
					}
				}
			}
		},
		removeClass:function(element, value){
			if(element){
				if(element.classList){
					var classes = element.classList;
					classes.remove(value);
				}
			}
		},
		hasClass:function(element, value){
			var temp = false;
			if(element){
				if(element.classList){
					var classes = element.classList;
					if(classes.contains(value)){
						temp = true;
					}
				}
			}
			return temp;
		},
		getBreakpoint:function(){
			var div = document.getElementById("breakpoints");
			var tag = window.getComputedStyle(div,":after").getPropertyValue("content");

			if(_isIE == undefined){
				Utils.isIE();
			}

			if(tag){
				if (_isIE) {
					tag = tag.replace(/"/g,"");
				}else{
					tag = tag.replace(/"/g,""); 
			   		tag = tag.replace(/(^')|('$)/g, '');
				}
			}else{
				tag = "NaN";
			}
				 		   
		    return parseInt(tag);
		},
		isMobile:function(){
			if(_isMobile == undefined){
				var a = navigator.userAgent;
				if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))){
					_isMobile = true;
				} else {
					_isMobile = false;
				}
			}
			return _isMobile;
		},
		isIE:function(){
			if(_isIE == undefined){
				var ua = navigator.userAgent;
	            if (ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident") > 0 || ua.indexOf("Edge") > 0){
	            	_isIE = true;
	            }else{
	            	_isIE = false;
            	}
			}
            return _isIE;
		},
		getIEVersion:function(){
			if(_ieVersion == undefined){
				var ua = navigator.userAgent;
		        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");

		        if (ua.indexOf("MSIE ") > 0){
		        	if (re.exec(ua) != null)
		            _ieVersion = parseFloat(RegExp.$1);
		        }
			}

			return _ieVersion;
		},
		isAndroid:function(){
			if(_isAndroid == undefined){
				if((navigator.userAgent.match(/android/i))){
					_isAndroid = true;
				} else {
					_isAndroid = false;
				}
			}
			return _isAndroid;
		},
		getAndroidVersion:function(){
			if(_androidVersion == undefined){
				var ua = navigator.userAgent.toLowerCase(); 
			    var match = ua.match(/android\s([0-9\.]*)/);
			    _androidVersion =  match ? match[1] : false;
			}

			return _androidVersion;
		},
		getWebkitVersion:function(){
			if(_webkitVersion == undefined){
				_webkitVersion = navigator.appVersion.match(/.*Chrome\/([0-9\.]+)/)[1];
			}

			return _webkitVersion; 
		},
		formatTime: function(seconds){
			seconds = Math.round(seconds);
			minutes = Math.floor(seconds / 60);
			minutes = (minutes >= 10) ? minutes : "0" + minutes;
			seconds = Math.floor(seconds % 60);
			seconds = (seconds >= 10) ? seconds : "0" + seconds;
			return minutes + ":" + seconds;
		},
		getClosest:function (elem, selector){
		    var firstChar = selector.charAt(0);
		    for (; elem && elem !== document; elem = elem.parentNode){
		        if (firstChar === '.') {
		            if (elem.classList.contains( selector.substr(1))){
		                return elem;
		            }
		        }
		        if (firstChar === '#'){
		            if (elem.id === selector.substr(1)){
		                return elem;
		            }
		        } 
		        if ( firstChar === '['){
		            if (elem.hasAttribute( selector.substr(1, selector.length - 2))){
		                return elem;
		            }
		        }
		        if (elem.tagName.toLowerCase() === selector){
		            return elem;
		        }
		    }
		    return false;
		},
		selectorMatches:function(el, selector) {
			var p = Element.prototype;
			var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {
				return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
			};
			return f.call(el, selector);
		},
		getParameterByName:function(name){
		    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
		    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
		        results = regex.exec(location.search);
		    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
		},
		shuffle:function(array){
		    for(var j, x, i = array.length; i; j = Math.floor(Math.random() * i), x = array[--i], array[i] = array[j], array[j] = x);
		    return array;
		},
		sortByKey:function(array, key) {
		    return array.sort(function(a, b) {
		        var x = a[key]; var y = b[key];
		        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		    });
		}
	}
})();

if (!window.getComputedStyle) {
	window.getComputedStyle = function(el, pseudo) {
		this.el = el;
		this.getPropertyValue = function(prop) {
			var re = /(\-([a-z]){1})/g;
			if (prop == 'float') prop = 'styleFloat';
			if (re.test(prop)) {
				prop = prop.replace(re, function () {return arguments[2].toUpperCase();});
			}
			return el.currentStyle[prop] ? el.currentStyle[prop] : null;
		}
		return this;
	}
}
var Transitions = (function(){
	return {
		getTransitionEvent:function(){
		    var t;
		    var el = document.createElement('fakeelement');
		    var transitions = {
				"animation"      : "animationend",
				"OAnimation"     : "oAnimationEnd",
				"MozAnimation"   : "animationend",
				"WebkitAnimation": "webkitAnimationEnd"
		    }

		    for(t in transitions){
		        if( el.style[t] !== undefined ){
		            return transitions[t];
		        }
		    }
		},
		getTransitionClasses:function(transition, direction){
			switch(transition){
				case "slide":
					if(direction == "horizontal"){
						_transitionOutClassNext = "pt-page-moveToRight";
						_transitionOutClassPrev = "pt-page-moveToLeft"
						_transitionInClassNext = "pt-page-moveFromRight";
						_transitionInClassPrev = "pt-page-moveFromLeft";
					}else{
						_transitionOutClassNext = "pt-page-moveToBottom";
						_transitionOutClassPrev = "pt-page-moveToTop"
						_transitionInClassNext = "pt-page-moveFromBottom";
						_transitionInClassPrev = "pt-page-moveFromTop";
					}
					break;
				case "rotateslide":
					if(direction == "horizontal"){
						_transitionOutClassNext = "pt-page-rotateSlideOutToRight";
						_transitionOutClassPrev = "pt-page-rotateSlideOutToLeft"
						_transitionInClassNext = "pt-page-rotateSlideInFromRight";
						_transitionInClassPrev = "pt-page-rotateSlideInFromLeft";
					}else{
						_transitionOutClassNext = "pt-page-rotateSlideOutToBottom";
						_transitionOutClassPrev = "pt-page-rotateSlideOutToTop"
						_transitionInClassNext = "pt-page-rotateSlideInFromBottom";
						_transitionInClassPrev = "pt-page-rotateSlideInFromTop";
					}
					break;
				case "scale":
					_transitionOutClassNext = "pt-page-scaleToDown";
					_transitionOutClassPrev = "pt-page-scaleToUp"
					_transitionInClassNext = "pt-page-scaleFromDown";
					_transitionInClassPrev = "pt-page-scaleFromUp";
					break;
				case "flip":
					if(direction == "horizontal"){
						_transitionOutClassPrev = "pt-page-flipOutToLeft";
						_transitionOutClassNext = "pt-page-flipOutToRight"
						_transitionInClassPrev = "pt-page-flipInFromLeft";
						_transitionInClassNext = "pt-page-flipInFromRight";
					}else{
						_transitionOutClassNext = "pt-page-flipOutToTop";
						_transitionOutClassPrev = "pt-page-flipOutToBottom"
						_transitionInClassNext = "pt-page-flipInFromTop";
						_transitionInClassPrev = "pt-page-flipInFromBottom";
					}
					break;
			}

			var obj = {
				inNext: _transitionInClassNext,
				inPrev: _transitionInClassPrev,
				outNext: _transitionOutClassNext,
				outPrev: _transitionOutClassPrev
			}

			return obj;
		}
	}
})();
var DataManager = (function(){
	var _debugId = "DataManager";
	var _data;

	return {
		load:function(url, callback){
			$.getJSON(url, function( data ) {
				_data = data;
				if(callback) callback();
				$(DataManager).trigger('COMPLETE');
			});
		},
		getDataByGroup:function(id){
			return _data[id];
		}
	}
})();
var Legal = (function(){
	var _debugId = "Legal";
	var _elements = [];
	var _expanded = false;

	function addListeners(){
		$(_elements["close"]).bind('click', handleOnClick);
		$(_elements["open"]).bind('click', handleOnClick);
	}

	function handleOnClick(event){
		//console.log(_debugId + " : handleOnClick()");
		_expanded = !_expanded;
		updateDisplay();
		if(event) event.preventDefault();
	}

	function updateDisplay(){
		if(_expanded){
			$(_elements["container"]).addClass("expanded").removeClass("collapsed");
		}else{
			$(_elements["container"]).removeClass("expanded").addClass("collapsed");
		}
	}

	return {
		init:function(){
			//console.log(_debugId + " : init()");
			var elements =$(document).find('[data-module="legal"]');
			for(var i = 0; i<elements.length; i++){
				var type = $(elements[i]).data("type");
				_elements[type] = elements[i];
			}

			updateDisplay();
			addListeners();
		}
	}
})();
var Site = (function(){
	var _debugId = "Site";
	
	//references
	var _window, _html, _body;
	var _homeButton;

	//
	var _isMobile;
	var _lockOrientation = false;
	var _lockMinSize = true;
	var _lockBrowserVersion = true;
	var _minIEVersion = 10;
	var _messages = [];

	//resize / orientation
	var _windowWidth, _windowHeight, _windowRatio;
	var _minHeight = 672;
	var _minWidth = 320;
	var _orientation;
	var _breakpoint;
	var _orientationChanged = false;

	//check for end of resizing 
	var _resizeTime = new Date(1, 1, 2000, 12,00,00);
	var _resizeTimeOut = false;
	var _resizeDelta = 200;
	var _isResizing = false;

	//check for end of scrolling
	var _scrollTime = new Date(1, 1, 2000, 12,00,00);
	var _scrollTimeOut = false;
	var _scrollDelta = 200;
	var _isScrolling = false;

	//background
	var _backgroundWidth = 1920;
	var _backgroundHeight = 1080;
	var _backgroundRatio = _backgroundWidth / _backgroundHeight;
	var _backgroundImages = [];

	function parseData(){
		console.log(_debugId + ", parseData()");
	}

	function addListeners(){
		_window.bind('scroll', handleOnScroll);

		if(typeof window.orientation === 'undefined') {
			if(window.matchMedia){
				var mqOrientation = window.matchMedia("(orientation: portrait)");
			    mqOrientation.addListener(function() { handleOnOrientationChange(); });
			}else{
				_window.bind('orientationchange', handleOnOrientationChange);
			}

			_window.bind('resize', handleOnResize);
			
		} else {
		  _window.bind('orientationchange', handleOnOrientationChange);
		}

		_homeButton.bind('click', handleNavigationRequest);
	}

	//handling scrolling of site
	function handleOnScroll(event){	
		if(!_isResizing){
			_scrollTime = new Date();
		    if (_scrollTimeOut === false) {
		        _scrollTimeOut = true;
		        setTimeout(checkEndOfScroll, _scrollDelta);
		    }
		}
	}
	
	function checkEndOfScroll() {
	    if (new Date() - _scrollTime < _scrollDelta) {
	        setTimeout(checkEndOfScroll, _scrollDelta);
	    } else {
	        _scrollTimeOut = false;
	        _isScrolling = false;
	    }               
	}

	//handling of resize / orientation
	function handleOnResize(event){
		_isResizing = true;
		_windowWidth = $(document).width();
		_windowHeight = $(document).height();
		_windowRatio = _windowWidth / _windowHeight;

		if(_windowWidth >= _windowHeight){
			_orientation = "landscape";
			_body.addClass("landscape").removeClass("portrait");
			
			if(_lockOrientation && _isMobile){
				_messages["ROTATE"].style.display = "block";
			}
		}else{
			_orientation = "portrait";
			_body.addClass("portrait").removeClass("landscape");

			if(_lockOrientation && _isMobile){
				_messages["ROTATE"].style.display = "none";
			}
		}

	    var temp = Utils.getBreakpoint();
	    if(temp != _breakpoint){
	    	_breakpoint = temp;
	    	console.log(_debugId + ", breakpoint: " +  _breakpoint);
	    }
	   
	    _resizeTime = new Date();
	    if (_resizeTimeOut === false) {
	        _resizeTimeOut = true;
	        setTimeout(checkEndOfResize, _resizeDelta);
	    }

	    resizeBackgrounds();

	    //if(_orientationChanged){
	    	//$('html body').scrollTop(0);
	    	//window.scrollTo(0, 0);
	  // }

	  	$('body').animate({
            scrollTop: '0'
        }, 0);


	    _orientationChanged = false;
	}

	function checkEndOfResize() {
	    if (new Date() - _resizeTime < _resizeDelta) {
	        setTimeout(checkEndOfResize, _resizeDelta);
	    } else {
	        _resizeTimeOut = false;
	        _isResizing = false;
	    }               
	}

	function handleOnOrientationChange(event){
		_orientationChanged = true;
		setTimeout(handleOnResize, 500);
	}

	function resizeBackgrounds(){
		var newWidth, newHeight, background;


		for(i = 0; i<_backgroundImages.length; i++){
			background = $(_backgroundImages[i]);
			
			//if(background.is(':visible')){
				newWidth = _windowWidth;
	            newHeight = Math.round(newWidth/_backgroundRatio);
				background.width(newWidth);
	            background.height(newHeight);

	            if(newHeight<_windowHeight){
	                newHeight = _windowHeight;
	                newWidth = Math.round(newHeight*_backgroundRatio);
	                background.width(newWidth);
	                background.height(newHeight);
	            }

	            if(background.attr("data-position") == "center"){
					if(newWidth > _windowWidth){
						background.css("left", ((_windowWidth-newWidth)/2) + "px");
					}else{
						background.css("left", "0px");
					}
					
					if(newHeight > _windowHeight){
						background.css("top", ((_windowHeight - newHeight)/2) + "px");
					}else{
						background.css("top", "0px");
					}
				}
			//}
		}
	}

	function handleNavigationRequest(event){
		var type = $(this).data("navigation-type");
		var id = $(this).data("navigation-id");

		switch(type){
			case "section":
				NavigationController.goToPage(id);
				break;
			case "overlay":
				break;
		}

		if(event) event.preventDefault();
	}

	function handleDataParsed(){
		console.log(_debugId + " : handleDataParsed()");
		console.log(DataManager.getDataByGroup("browser").message);
		addListeners();
		handleOnResize();

		if(Utils.isIE() && Utils.getIEVersion() < _minIEVersion && _lockBrowserVersion){
			_messages["UPDATE"].style.display = "block";
		}else{
			//browser is new enough.. let's start
			NavigationController.init();
			MenuController.init();
			Legal.init();
			NavigationController.start();
		}

		_body.removeClass('loading').addClass('loaded');
	}

	return {
		init:function(){
			//console.log(_debugId + ", init()");
			_window = $(window);
			_html = $('html');
			_body = $('body');

			//messages for user feedback
			var messages = $('.site-message');
			var title;

			for(i = 0; i<messages.length; i++){
				title = $(messages[i]).data("message-title");
				_messages[title] = messages[i];
			}

			_backgroundImages = $('.section-background');

			_homeButton = $('#main-title-link');

			_isMobile = Utils.isMobile();
			_isMobile ? _body.addClass('mobile') : _body.addClass('desktop');

			DataManager.load("files/data/data.json", handleDataParsed);
		}
	}
})();
var MenuController = (function(){
	var _debugId = "MenuController";
	var _expanded = false;
	var _buttons = [];
	var _elements = [];

	function addListeners(){
		for(var i = 0; i<_buttons.length; i++){
			$(_buttons[i]).bind('click', handleOnClick);
		}

		$(_elements["open"]).bind('click', open);
		$(_elements["navigation"]).bind('click', close);

		$(NavigationController).bind('NAVIGATE_TO_PAGE', updateNavigation);
	}

	function handleOnClick(event){
		var type = $(this).data("navigation-type");
		var id = $(this).data("navigation-id");

		switch(type){
			case "section":
				NavigationController.goToPage(id);
				break;
			case "overlay":
				NavigationController.showOverlay(id);
				break;
		}

		if(event) event.preventDefault();
	}

	function open(event){
		if(!_expanded){
			_expanded = true;
		}
		updateDisplay();
		if(event) event.preventDefault();
	}

	function close(event){
		if(_expanded){
			_expanded = false;
		}
		updateDisplay();
		if(event) event.preventDefault();
	}

	function updateDisplay(){
		if(_expanded){
			$(_elements["container"]).addClass("expanded").removeClass("collapsed");
			$(_elements["navigation"]).addClass("expanded").removeClass("collapsed");
		}else{
			$(_elements["container"]).removeClass("expanded").addClass("collapsed");
			$(_elements["navigation"]).removeClass("expanded").addClass("collapsed");
		}
	}

	function updateNavigation(event, page){
		for(var i = 0; i<_buttons.length; i++){
			var type =$(_buttons[i]).data("navigation-type");
			var id = $(_buttons[i]).data("navigation-id");
			if(type == "section"){
				if(id == page){
					$(_buttons[i]).addClass("active");
				}else{
					$(_buttons[i]).removeClass("active");
				}
			}
		}
	}

	return {
		init:function(){
			var elements =$(document).find('[data-module="menu"]');
			for(var i = 0; i<elements.length; i++){
				var type = $(elements[i]).data("type");
				_elements[type] = elements[i];
			}

			_buttons = $('.navigation-item');
			updateDisplay();
			addListeners();
		}
	}
})();
var NavigationController = (function(){
	var _debugId = "NavigationController";
	var _currentPageId;
	var _pageFlow = "next";
	var _pages = [];
	var _overlays = [];

	var _transition = "scale";
	var _direction = "horizontal";
	var _transitionOutClassPrev, _transitionOutClassNext, _transitionInClassPrev, _transitionInClassNext;

	function setup(){
		var transitions = Transitions.getTransitionClasses(_transition, _direction);
		_transitionInClassNext = transitions.inNext;
		_transitionInClassPrev = transitions.inPrev;
		_transitionOutClassNext = transitions.outNext;
		_transitionOutClassPrev = transitions.outPrev;

		for(var i = 0; i<_pages.length; i++){
			_pages[i].setPgeTransitionClasses(_transitionOutClassPrev, _transitionOutClassNext, _transitionInClassPrev, _transitionInClassNext);
		}
	}

	function displayPage(name){
		for(i = 0; i<_pages.length; i++){			
			if(_pages[i].getName() == name){
				$(NavigationController).trigger("NAVIGATE_TO_PAGE", name);
				_currentPageId = i;
				_pages[i].willAppear();
				_pages[i].show("");
				_pages[i].didAppear();
			}
		}
	}

	function navigateToPage(name){
		var i;
		for(i = 0; i<_pages.length; i++){
			if(_pages[i].getPageIsTransitioning()) return;
			
			if(_pages[i].getName() == name){
				if(!_pages[i].getIsActive()){
					$(NavigationController).trigger("NAVIGATE_TO_PAGE", name);

					if(i >= _currentPageId || _currentPageId == undefined){
						_pageFlow = "next";
					}else{
						_pageFlow = "prev";
					}

					_currentPageId = i;

					_pages[i].willAppear();
					_pages[i].show(_pageFlow);
					_pages[i].didAppear();
				}
			}
		}

		for(i = 0; i<_pages.length; i++){
			if(_pages[i].getName() != name){
				if(_pages[i].getIsActive()){
					_pages[i].willDisappear();
					_pages[i].hide(_pageFlow);
					_pages[i].didDisappear();
				}
			}
		}
	}

	function navigateToOverlay(name){
		for(var i = 0; i<_overlays.length; i++){
			if(_overlays[i].getName() == name){
				if(!_overlays[i].getIsActive()){
					_overlays[i].willAppear();
					_overlays[i].show();
					_overlays[i].didAppear();
				}
			}
		}
	}

	function navigateFromOverlay(name){
		for(var i = 0; i<_overlays.length; i++){
			if(_overlays[i].getName() == name){
				if(_overlays[i].getIsActive()){
					_overlays[i].willDisappear();
					_overlays[i].hide();
					_overlays[i].didDisappear();
				}
			}
		}
	}

	return {
		getSectionByName(name){
			for(var i = 0; i<_pages.length; i++){
				if(_pages[i].getName() == name){
					return _pages[i];
				}
			}
		},
		init:function(){
			var sections = $('.site-section');
			var overlays = $('.site-overlay');

			var title, section, overlay, i;

			for(i = 0; i<sections.length; i++){
				title = $(sections[i]).data("section-title");

				switch(title){
					case "HOME":
						section = new HomePage(sections[i].id, sections[i], title);
						break;
					case "STORY":
						section = new StoryPage(sections[i].id, sections[i], title);
						break;
					case "PHOTOS":
						section = new PhotosPage(sections[i].id, sections[i], title);
						break;
					case "CAST":
						section = new CastPage(sections[i].id, sections[i], title);
						break;
					default:
						section = new Page(sections[i].id, sections[i], title);
				}

				section.init();
				_pages.push(section);
			}

			for(i = 0; i<overlays.length; i++){
				title  = $(overlays[i]).data("overlay-title");
				switch(title){
					case "INTRO":
						overlay = new IntroOverlay(overlays[i].id, overlays[i], title);
						break;
					case "VIDEO":
						overlay = new VideoOverlay(overlays[i].id, overlays[i], title);
						break;
				}

				overlay.init();
				_overlays.push(overlay);
			}

			setup();
		},
		goToPage:function(id){
			navigateToPage(id);
		},
		showOverlay:function(id){
			navigateToOverlay(id);
		},
		hideOverlay:function(id){
			navigateFromOverlay(id);
		},
		start:function(){
			displayPage("HOME");
		}
	}
})();
(function(){
	function Overlay(id, node, name){
		if(Overlay.allowInstance){
			var _debugId = id;
			var _name = name;
			var _id = id;
			var _node = node;
			var _enabled = false;
			var _isActive = false;

			this.getId = function(){
				return _id;
			}

			this.getNode = function(){
				return _node;
			}

			this.getName = function(){
				return _name;
			}

			this.getEnabled = function(){
				return _enabled;
			}

			this.getIsActive = function(){
				return _isActive;
			}

			this.init = function(){}

			this.enable = function(){
				_enabled = true;
			}

			this.disable = function(){
				_enabled = false;
			}

			this.willAppear = function(){
				_isActive = true;
			}

			this.didAppear = function(){}

			this.willDisappear = function(){
				_isActive = false;
			}

			this.didDisappear = function(){}

			this.show = function(){
				_node.style.display = "block";
			}

			this.hide = function(){
				_node.style.display = "none";
			}
		}
		this.constructor = Overlay;
	}
	Overlay.allowInstance = true;
	window.Overlay = Overlay;
})();
(function(){
	function IntroOverlay(id, node, name){
		var _debugId = "IntroOverlay";
		var _super = new Page(id, node, name);

		for(var name in _super){
			this[name] = _super[name];
		}

		function addListeners(){
			//console.log(_debugId + " : addListeners()");
		}

		function removeListeners(){
			//console.log(_debugId + " : removeListeners()");
		}

		this.didAppear = function(){
			addListeners();
			_super.didAppear();
		};

		this.willDisappear = function(){
			removeListeners();
			_super.willDisappear();
		}

		this.init = function(){
			_super.init();
		}

		this.constructor = Overlay;
	}

	Overlay.allowInstance = false;
	IntroOverlay.prototype = new Overlay();
	Overlay.allowInstance = true;

	window.IntroOverlay = IntroOverlay;
})(window);
(function(){
	function VideoOverlay(id, node, name){
		var _debugId = "VideoOverlay";
		var _super = new Overlay(id, node, name);
		var _elements = [];
		var _youtubeId = "r_rSAbYyIq0";
		var _youtubePlayer;
		var _apiReady = false;

		for(var name in _super){
			this[name] = _super[name];
		}

		function handleAPIReady(){
			_apiReady = true;
		}

		function addListeners(){
			$(_elements["close"]).bind('click', handleOnClick);
		}

		function removeListeners(){
			$(_elements["close"]).unbind('click', handleOnClick);
		}

		function handleOnClick(event){
			NavigationController.hideOverlay("VIDEO");
			event.preventDefault();
		}

		function addPlayer(){
			_youtubePlayer = new YT.Player(_elements["player"], {
		        height: '100%',
		        width: '100%',
		        videoId: _youtubeId,
				playerVars: {  /*'html5': 1, */'autoplay': 1, 'controls': 1,'autohide':1, 'wmode':'opaque', 'showinfo' : 0, 'rel' : 0 },
		        events: {
		            'onReady': onPlayerReady,
		            'onStateChange': onPlayerStateChange
		        }
		    });
		}

		function removePlayer(){
			_youtubePlayer.destroy();
		}

		function disableVideo(){
			if(_youtubePlayer.getPlayerState){
				if(_youtubePlayer.getPlayerState() == 1){
					_youtubePlayer.pauseVideo();
				}
			}
		}

		function onPlayerReady(event){
			console.log("onPlayerReady()");
			//if($('body').hasClass("desktop")){
			//	event.target.playVideo();
			//}
	    }

	    function onPlayerStateChange(event){
		   	console.log("onPlayerStateChange(" + event.data + ")");
		   	if(event.data == 0){
		   		//if($('body').hasClass("desktop")){
					$(_elements["close"]).trigger("click");
			//	}
		   	}
	   }

		this.didAppear = function(){
			addListeners();
			addPlayer();
			_super.didAppear();
		};

		this.willDisappear = function(){
			removeListeners();
			removePlayer();
			_super.willDisappear();
		}

		this.init = function(id){
			if(id) _youtubeId = id;

			YT.ready(function(){
				handleAPIReady();
			})

			var elements =$(_super.getNode()).find('[data-module="video"]');
			for(var i = 0; i<elements.length; i++){
				var type = $(elements[i]).data("type");
				_elements[type] = elements[i];
			}

			_super.init();
		}

		this.constructor = Overlay;
	}

	Overlay.allowInstance = false;
	VideoOverlay.prototype = new Overlay();
	Overlay.allowInstance = true;

	window.VideoOverlay = VideoOverlay;
})(window);
(function(){
	function Page(id, node, name){
		if(Page.allowInstance){
			var _debugId = id;
			var _name = name;
			var _id = id;
			var _node = node;
			var _enabled = false;
			var _isActive = false;

			var _isPageTransitioning = false;
			var _pageTransitionEvent = Transitions.getTransitionEvent();
			var _pageTransitionOutClassPrev, _pageTransitionOutClassNext, _pageTransitionInClassPrev, _pageTtransitionInClassNext;

			function handlePageTransitionComplete(event){
				if(!_isActive){
					$(_node).removeClass(_pageTransitionOutClassNext + " " + _pageTransitionOutClassPrev + " site-section-current site-section-prev");
					_node.style.display = "none";
				}
				
				_isPageTransitioning = false;
			}

			this.getId = function(){
				return _id;
			}

			this.getNode = function(){
				return _node;
			}

			this.getName = function(){
				return _name;
			}

			this.getEnabled = function(){
				return _enabled;
			}

			this.getIsActive = function(){
				return _isActive;
			}

			this.getPageIsTransitioning = function(){
				return _isPageTransitioning;
			}

			this.setPgeTransitionClasses = function(outPrev, outNext, inPrev, inNext){
				_pageTransitionOutClassPrev = outPrev;
				_pageTransitionOutClassNext = outNext;
				_pageTransitionInClassPrev = inPrev;
				_pageTransitionInClassNext = inNext;
			}

			this.init = function(){
				$(_node).bind(_pageTransitionEvent, handlePageTransitionComplete);
			}

			this.enable = function(){
				_enabled = true;
			}

			this.disable = function(){
				_enabled = false;
			}

			this.willAppear = function(){
				_isActive = true;
			}

			this.didAppear = function(){}

			this.willDisappear = function(){
				_isActive = false;
			}

			this.didDisappear = function(){}

			this.show = function(direction){
				console.log(_debugId + " : show(" + direction + ")");

				_node.style.display = "block";
				$(_node).removeClass(_pageTransitionOutClassNext + " " + _pageTransitionOutClassPrev + " site-section-current site-section-prev");
				$(_node).addClass("site-section-current");
				
				if(direction == "next"){
					_isPageTransitioning = true;
					$(_node).addClass(_pageTransitionInClassNext);
				}else if(direction == "prev"){
					_isPageTransitioning = true;
					$(_node).addClass(_pageTransitionInClassPrev);
				}
			}

			this.hide = function(direction){
				console.log(_debugId + " : hide(" + direction + ")");

				$(_node).removeClass(_pageTransitionInClassNext + " " + _pageTransitionInClassPrev + " site-section-current");
				$(_node).addClass("site-section-prev");

				if(direction == "next"){
					$(_node).addClass(_pageTransitionOutClassPrev);
				}else{
					$(_node).addClass(_pageTransitionOutClassNext);
				}
			}
		}
		this.constructor = Page;
	}
	Page.allowInstance = true;
	window.Page = Page;
})();
(function(){
	function CastPage(id, node, name){
		var _debugId = "CastPage";
		var _super = new Page(id, node, name);

		for(var name in _super){
			this[name] = _super[name];
		}

		function addListeners(){
			//console.log(_debugId + " : addListeners()");
		}

		function removeListeners(){
			//console.log(_debugId + " : removeListeners()");
		}

		this.didAppear = function(){
			addListeners();
			_super.didAppear();
		};

		this.willDisappear = function(){
			removeListeners();
			_super.willDisappear();
		}

		this.init = function(){
			_super.init();
		}

		this.constructor = Page;
	}

	Page.allowInstance = false;
	CastPage.prototype = new Page();
	Page.allowInstance = true;

	window.CastPage = CastPage;
})(window);
(function(){
	function HomePage(id, node, name){
		var _debugId = "HomePage";
		var _super = new Page(id, node, name);

		for(var name in _super){
			this[name] = _super[name];
		}

		function addListeners(){
			//console.log(_debugId + " : addListeners()");
		}

		function removeListeners(){
			//console.log(_debugId + " : removeListeners()");
		}

		this.didAppear = function(){
			addListeners();
			_super.didAppear();
		};

		this.willDisappear = function(){
			removeListeners();
			_super.willDisappear();
		}

		this.init = function(){
			_super.init();
		}

		this.constructor = Page;
	}

	Page.allowInstance = false;
	HomePage.prototype = new Page();
	Page.allowInstance = true;

	window.HomePage = HomePage;
})(window);
(function(){
	function PhotosPage(id, node, name){
		var _debugId = "PhotosPage";
		var _super = new Page(id, node, name);

		var _numImages;
		var _container, _inner;
		var _imageWidth, _imageHeight;
		var _transition = node.getAttribute("data-al-transition");
		var _direction = node.getAttribute("data-al-direction");
		var _loop = false;
		var _currentImage, _prevImage;
		var _currentIndex = 0;
		var _prevIndex = 0;
		var _images = [];
		var _transitionEvent = Transitions.getTransitionEvent();
		var _isTransitioning = false;
		var _numTransitionsComplete = 0;
		var _transitionOutClassPrev, _transitionOutClassNext, _transitionInClassPrev, _transitionInClassNext;
		var _transition = "slide";
		var _direction = "horizontal";
		var _prevButton;
		var _nextButton;

		for(var name in _super){
			this[name] = _super[name];
		}

		function setup(){
			_container = $('#gallery');
			_inner = $('#gallery-images');
			_images = $('.gallery-image');
			_prevButton = $('#gallery-prev');
			_nextButton = $('#gallery-next');
			_imageWidth= _container.offsetWidth;
			_imageHeight = _container.offsetHeight;
			_numImages = _images.length;

			for(var i = 0; i<_numImages; i++){
				$(_images[i]).bind(_transitionEvent, handleTransitionComplete);
			}

			var transitions = Transitions.getTransitionClasses(_transition, _direction);
			_transitionInClassNext = transitions.inNext;
			_transitionInClassPrev = transitions.inPrev;
			_transitionOutClassNext = transitions.outNext;
			_transitionOutClassPrev = transitions.outPrev;

			reset();
		}

		function handleTransitionComplete(event){
			console.log(_debugId + " : handleTransitionComplete()");
			$(_prevImage).removeClass("gallery-image-prev" + " " + _transitionOutClassNext + " " + _transitionOutClassPrev);
			_isTransitioning = false;
		}

		function addListeners(){
			//console.log(_debugId + " : addListeners()");
			$(_prevButton).bind('click', prev);
			$(_nextButton).bind('click', next);
		}

		function removeListeners(){
			//console.log(_debugId + " : removeListeners()");
			$(_prevButton).unbind('click', prev);
			$(_nextButton).unbind('click', next);
		}

		function move(index){
			console.log(_debugId,"move(" + index + ", " + _currentIndex + ")");

			if(_isTransitioning) return;

			_isTransitioning = true;
			
			if(_currentImage){
				_prevImage = _currentImage;
				_prevIndex = _currentIndex;

				$(_prevImage).removeClass("gallery-image-current" + " " + _transitionInClassNext + " " + _transitionInClassPrev);
				$(_prevImage).addClass("gallery-image-prev");
				
				if(_prevIndex == _numImages-1 && index == 0){
					$(_prevImage).addClass(_transitionOutClassPrev);
				}else if(_prevIndex == 0 && index == _numImages-1){
					$(_prevImage).addClass(_transitionOutClassNext);
				}else{
					if(_prevIndex <= index){
						$(_prevImage).addClass(_transitionOutClassPrev);
					}else{
						$(_prevImage).addClass(_transitionOutClassNext);
					}
				}
			}

			_currentIndex = index;
			_currentImage = _images[index];

			$(_currentImage).removeClass("gallery-image-prev" + " " + _transitionOutClassNext + " " + _transitionOutClassPrev);
			$(_currentImage).addClass("gallery-image-current");

			if(_prevIndex == _numImages-1 && index == 0){
				$(_currentImage).addClass(_transitionInClassNext);
			}else if(_prevIndex == 0 && index == _numImages-1){
				$(_currentImage).addClass(_transitionInClassPrev);
			}else{
				if(_prevIndex <= index){
					$(_currentImage).addClass(_transitionInClassNext);
				}else{
					$(_currentImage).addClass(_transitionInClassPrev);
				}
			}

			
		}

		function prev(event){			
			var nextIndex = _currentIndex - 1;

			if(_loop){
				if(nextIndex < 0){
					nextIndex = _numImages-1;
				}
				move(nextIndex);
			}else{
				if(nextIndex >= 0){
					move(nextIndex);
				}
			}

			if(event) event.preventDefault();
		}

		function next(event){
			var nextIndex = _currentIndex + 1;

			if(_loop){
				if(nextIndex >= _numImages){
					nextIndex = 0;
				}
				move(nextIndex);
			}else{
				if(nextIndex < _numImages){
					move(nextIndex);
				}
			}

			if(event) event.preventDefault();
		}

		function reset(){
			if(_currentImage){
				_prevImage = _currentImage;
				_prevIndex = _currentIndex;

				$(_prevImage).removeClass("gallery-image-current" + " " + _transitionInClassNext + " " + _transitionInClassPrev);
			}

			_currentIndex = 0;
			_currentImage = _images[0];

			$(_currentImage).removeClass("gallery-image-prev" + " " + _transitionOutClassNext + " " + _transitionOutClassPrev);
			$(_currentImage).addClass("gallery-image-current");
		}

		this.willAppear = function(){
			reset();
			_super.willAppear();
		}

		this.didAppear = function(){
			addListeners();
			_super.didAppear();
		}

		this.willDisappear = function(){
			removeListeners();
			_super.willDisappear();
		}

		this.didDisappear = function(){
			_super.didDisappear();
		}

		this.init = function(){
			setup();
			_super.init();
		}

		this.constructor = Page;
	}

	Page.allowInstance = false;
	PhotosPage.prototype = new Page();
	Page.allowInstance = true;

	window.PhotosPage = PhotosPage;
})(window);
(function(){
	function StoryPage(id, node, name){
		var _debugId = "StoryPage";
		var _super = new Page(id, node, name);

		for(var name in _super){
			this[name] = _super[name];
		}

		function addListeners(){
			//console.log(_debugId + " : addListeners()");
		}

		function removeListeners(){
			//console.log(_debugId + " : removeListeners()");
		}

		this.didAppear = function(){
			addListeners();
			_super.didAppear();
		};

		this.willDisappear = function(){
			removeListeners();
			_super.willDisappear();
		}

		this.init = function(){
			_super.init();
		}

		this.constructor = Page;
	}

	Page.allowInstance = false;
	StoryPage.prototype = new Page();
	Page.allowInstance = true;

	window.StoryPage = StoryPage;
})(window);